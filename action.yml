name: "Check new/changed code coverage"

inputs:
    fail-under:
        description: "Target coverage percentage (0-100)"
        type: number
        default: 80
    coverage-path:
        description: "Path to coverage reports (uses common defaults if not specified)"
        type: string
        default: "coverage/clover.xml"
    compare-branch:
        description: "Branch to compare coverage against"
        type: string
        default: ${{ github.event.pull_request.base.ref }}
    exclude:
        description: "Exclude files from coverage check (whitespace-separated list)"
        type: string
        default: ""

runs:
    using: "composite"
    steps:
        - name: Setup Python
          uses: actions/setup-python@v4
          with:
              python-version: "3.x"

        - name: Install diff-cover
          shell: bash
          run: pip install diff-cover

        - name: Fetch base branch for comparison
          shell: bash
          run: |
              git fetch origin ${{ github.event.pull_request.base.ref }}
              git checkout ${{ github.event.pull_request.head.sha }}

        - name: Check coverage
          shell: bash
          run: |
              diff-cover ${{ inputs.coverage-path }} --compare-branch=origin/${{ inputs.compare-branch }} --fail-under=${{ inputs.fail-under }} --exclude ${{ inputs.exclude }} > coverage-report.txt
              # remove empty lines
              sed -i '' '/^[[:space:]]*$/d' coverage-report.txt

              # debug:
              cat coverage-report.txt

        - name: Post coverage comment
          if: always()
          uses: actions/github-script@v6
          with:
              script: |
                  const fs = require('fs');
                  const coverageReport = fs.readFileSync('coverage-report.txt', 'utf8');
                  const commentBody = `### Code Coverage Report\n\`\`\`\n${coverageReport}\n\`\`\``;

                  const { data: comments } = await github.rest.issues.listComments({
                      ...context.repo,
                      issue_number: context.issue.number,
                  });

                  const existingComment = comments.find(comment => comment.body.startsWith('### Code Coverage Report'));

                  if (existingComment) {
                      console.log(`Updating existing comment with ID: ${existingComment.id}`);
                      await github.rest.issues.updateComment({
                          ...context.repo,
                          comment_id: existingComment.id,
                          body: commentBody,
                      });
                  } else {
                      console.log('Creating new comment');
                      await github.rest.issues.createComment({
                          ...context.repo,
                          issue_number: context.issue.number,
                          body: commentBody,
                      });
                  }
