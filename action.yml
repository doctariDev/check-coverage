name: "Check new/changed code coverage"

inputs:
    fail-under:
        description: "Target coverage percentage (0-100)"
        type: number
        default: 80
    coverage-path:
        description: "Path to coverage reports (uses common defaults if not specified)"
        type: string
        default: "coverage/clover.xml"
    compare-branch:
        description: "Branch to compare coverage against"
        type: string
        default: ${{ github.event.pull_request.base.ref }}
    exclude:
        description: "Exclude files from coverage check (whitespace-separated list)"
        type: string
        default: ""
    diff-lines-threshold:
        description: "Skip coverage check if changed lines are below this threshold (0 to always run)"
        type: number
        default: 0

runs:
    using: "composite"
    steps:
        - name: Always pass if not called for a pull request
          if: github.event_name != 'pull_request'
          shell: bash
          run: |
              echo "Not a pull request event, skipping coverage check."
              exit 0

        - name: Check changed lines count
          if: github.event_name == 'pull_request' && inputs.diff-lines-threshold > 0
          id: check-lines
          shell: bash
          run: |
              git fetch origin ${{ inputs.compare-branch }}
              CHANGED_LINES=$(git diff --numstat origin/${{ inputs.compare-branch }}...HEAD | awk '{sum += $1 + $2} END {print sum+0}')
              echo "changed-lines=$CHANGED_LINES" >> $GITHUB_OUTPUT
              echo "skip-coverage=$([[ $CHANGED_LINES -lt ${{ inputs.diff-lines-threshold }} ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
              echo "Changed lines: $CHANGED_LINES, threshold: ${{ inputs.diff-lines-threshold }}"

        - name: Setup Python
          if: github.event_name == 'pull_request' && (inputs.diff-lines-threshold == 0 || steps.check-lines.outputs.skip-coverage != 'true')
          uses: actions/setup-python@v4
          with:
              python-version: "3.x"

        - name: Install diff-cover
          if: github.event_name == 'pull_request' && (inputs.diff-lines-threshold == 0 || steps.check-lines.outputs.skip-coverage != 'true')
          shell: bash
          run: pip install diff-cover

        - name: Fetch base branch for comparison
          if: github.event_name == 'pull_request' && (inputs.diff-lines-threshold == 0 || steps.check-lines.outputs.skip-coverage != 'true')
          shell: bash
          run: |
              git fetch origin ${{ github.event.pull_request.base.ref }}
              git checkout ${{ github.event.pull_request.head.sha }}

        - name: Check coverage
          if: github.event_name == 'pull_request' && (inputs.diff-lines-threshold == 0 || steps.check-lines.outputs.skip-coverage != 'true')
          shell: bash
          run: |
              diff-cover ${{ inputs.coverage-path }} --compare-branch=origin/${{ inputs.compare-branch }} --fail-under=${{ inputs.fail-under }} --exclude ${{ inputs.exclude }} > coverage-report.txt

        - name: Remove empty lines
          if: always() && github.event_name == 'pull_request' && (inputs.diff-lines-threshold == 0 || steps.check-lines.outputs.skip-coverage != 'true')
          shell: bash
          run: |
              sed -i '/^[[:space:]]*$/d' coverage-report.txt

        - name: Post coverage comment
          if: always() && github.event_name == 'pull_request' && (inputs.diff-lines-threshold == 0 || steps.check-lines.outputs.skip-coverage != 'true')
          uses: actions/github-script@v6
          with:
              script: |
                  const fs = require('fs');
                  const coverageReport = fs.readFileSync('coverage-report.txt', 'utf8');
                  const commentBody = `### Code Coverage Report\n\`\`\`\n${coverageReport}\n\`\`\``;

                  const { data: comments } = await github.rest.issues.listComments({
                      ...context.repo,
                      issue_number: context.issue.number,
                  });

                  const existingComment = comments.find(comment => comment.body.startsWith('### Code Coverage Report'));

                  if (existingComment) {
                      await github.rest.issues.updateComment({
                          ...context.repo,
                          comment_id: existingComment.id,
                          body: commentBody,
                      });
                  } else {
                      await github.rest.issues.createComment({
                          ...context.repo,
                          issue_number: context.issue.number,
                          body: commentBody,
                      });
                  }
